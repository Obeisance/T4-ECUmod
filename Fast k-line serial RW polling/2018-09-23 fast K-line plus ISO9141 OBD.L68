00031030 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 10/6/2018 10:12:34 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : ISO-9141 + fast serial integration
00000000                             3  * Written by : Lotus/mod by Obeisance
00000000                             4  * Date       : 2018-09-23
00000000                             5  * Description: This code replicates the Lotus code at 0x22ada
00000000                             6  *              and adds in an additional mode initialization
00000000                             7  *              that allows for fast serial data responses with
00000000                             8  *              formatting different from OBD response routines
00000000                             9  *-----------------------------------------------------------
00031030                            10      ORG    $31030
00031030  =00081168                 11  Serial_receive_buffer EQU $81168
00031030  =000811E8                 12  Serial_send_buffer EQU $811e8
00031030  =000807BC                 13  OBD_init_level EQU $807bc
00031030  =000807C8                 14  Serial_received_byte_count EQU $807c8
00031030  =000807CA                 15  Num_serial_bytes_left_to_read EQU $807ca
00031030  =000807CC                 16  Serial_send_buffer_byte_count EQU $807cc
00031030  =000807CE                 17  Serial_send_buffer_index EQU $807ce
00031030  =000807D0                 18  Checksum_calc_buffer EQU $807d0
00031030  =000807D2                 19  OBD_timeout_counter_5ms_multiple EQU $807d2
00031030  =000807D8                 20  OBD_continue_response_counter EQU $807d8
00031030  =00080838                 21  DTC_sent_via_OBD_count EQU $80838
00031030  =00080D4A                 22  OBD_mode_0x9_msgs_sent EQU $80d4a
00031030  =0002E506                 23  OBD_mode_0x9_resp_cont EQU $2e506
00031030  =0002351E                 24  OBD_Mode_0x1_resp EQU $2351e
00031030  =00023F7A                 25  OBD_Mode_0x2_resp EQU $23f7a
00031030  =00025746                 26  OBD_Mode_0x3_resp EQU $25746
00031030  =000258EA                 27  OBD_Mode_0x4_resp EQU $258ea
00031030  =0002621A                 28  OBD_Mode_0x5_resp EQU $2621a
00031030  =00028016                 29  OBD_Mode_0x6_resp EQU $28016
00031030  =00028646                 30  OBD_Mode_0x7_resp EQU $28646
00031030  =0002E7C4                 31  OBD_Mode_0x8_resp EQU $2e7c4
00031030  =0002DEE0                 32  OBD_Mode_0x9_resp EQU $2dee0
00031030  =00027F90                 33  OBD_Mode_not_supported EQU $27f90
00031030  =00024400                 34  OBD_Mode_0x22_resp EQU $24400
00031030  =000269C2                 35  OBD_Mode_0x2F_resp EQU $269c2
00031030  =0002EB30                 36  OBD_Mode_0x3B_resp EQU $2eb30
00031030  =00FFFC08                 37  SCCR0 EQU $fffc08
00031030  =00FFFC0A                 38  SCCR1 EQU $fffc0a
00031030  =00FFFC0C                 39  SCSR EQU $fffc0c
00031030  =00FFFC0E                 40  SCDR EQU $fffc0e
00031030                            41   
00031030                            42  START:                  ; first instruction of program
00031030                            43  
00031030                            44  * Put program code here
00031030                            45  
00031030                            46  ; Copy much of the OBD serial response subroutine at 0x022ada
00031030                            47  ; I made changes so that the code is more compact
00031030  4E56 FFE6                 48      LINK A6,#-26
00031034  48EF 3C04 0004            49      MOVEM.L A5/A4/A3/A2/D2,($4,A7)
0003103A  45F9 00081168             50      LEA Serial_receive_buffer,A2    ; OBD incoming serial packet buffer
00031040  47F9 000807D0             51      LEA Checksum_calc_buffer,A3 ; Checksum calculation buffer
00031046  49F9 000807C8             52      LEA Serial_received_byte_count,A4   ; Number of serial bytes received
0003104C  4BF9 000807D2             53      LEA OBD_timeout_counter_5ms_multiple,A5   ; OBD timeout counter - 5 millisecond multiple
00031052  4EB9 00025880             54      JSR ($25880).L  ; update byte at ($80834).L depending on DTC count
00031058  1039 000807BC             55      MOVE.B (OBD_init_level).L,D0    ; Load the OBD init level counter
0003105E  0C00 0009                 56      CMPI.B #9,D0
00031062  6200 0464                 57      BHI end_OBD_routine ; end routine if the init level is too high
00031066  4880                      58      EXT.W D0
00031068  D040                      59      ADD.W D0,D0
0003106A  303B 0006                 60      MOVE.W (*+$2+$6,PC,D0.W),D0
0003106E                            61  jump_start
0003106E  4EFB 0002                 62      JMP (*+$2+$2,PC,D0.W)   ; jump to end routine if OBD init level is not 9 
00031072= 0456                      63      DC.W end_OBD_routine-jump_start-$4
00031074= 0456                      64      DC.W end_OBD_routine-jump_start-$4
00031076= 0456                      65      DC.W end_OBD_routine-jump_start-$4
00031078= 0456                      66      DC.W end_OBD_routine-jump_start-$4
0003107A= 0456                      67      DC.W end_OBD_routine-jump_start-$4
0003107C= 0456                      68      DC.W end_OBD_routine-jump_start-$4
0003107E= 0456                      69      DC.W end_OBD_routine-jump_start-$4
00031080= 0456                      70      DC.W end_OBD_routine-jump_start-$4
00031082= 0456                      71      DC.W end_OBD_routine-jump_start-$4
00031084= 0018                      72      DC.W check_OBD_mode-jump_start-$4  ;if OBD init mode is 9, then we continue in the routine
00031086  6000 0440                 73      BRA.W end_OBD_routine
0003108A                            74  check_OBD_mode
0003108A  0C14 0005                 75      CMPI.B #5,(A4)  ; we always have at least 5 bytes in an OBD query
0003108E  6500 03EA                 76      BCS.W check_error_states    ; branch if we don't have enough bytes
00031092  0C12 0068                 77      CMPI.B #104,(A2)     ; check for correct packet structure [104 106 241 MODE PID checksum]
00031096  6600 0392                 78      BNE.W incorrect_structure_for_ISO_9141
0003109A  0C2A 006A 0001            79      CMPI.B #106,($1,A2)
000310A0  6600 0388                 80      BNE.W incorrect_structure_for_ISO_9141
000310A4  0C2A 00F1 0002            81      CMPI.B #241,($2,A2)
000310AA  6600 037E                 82      BNE.W incorrect_structure_for_ISO_9141
000310AE                            83      ;****Mode 0x1****
000310AE  0C2A 0001 0003            84      CMPI.B #1,($3,A2)
000310B4  6628                      85      BNE.B Mode_0x2
000310B6  0C14 0006                 86      CMPI.B #6,(A4)
000310BA  6500 040C                 87      BCS.W end_OBD_routine
000310BE  4EB9 000314D2             88      JSR (Calc_checksum).L   ; this works without passing in variables because the number of bytes to read and buffer location are fixed in memory
000310C4  B03C 0001                 89      CMP.B #1,D0 ; If D0 = 0, we have a bad checksum
000310C8  6600 0350                 90      BNE.W end_OBD_Mode_response
000310CC  7000                      91      MOVEQ #0,D0
000310CE  102A 0004                 92      MOVE.B ($4,A2),D0
000310D2  2E80                      93      MOVE.L D0,(A7)
000310D4  4EB9 0002351E             94      JSR (OBD_Mode_0x1_resp).L
000310DA  6000 033E                 95      BRA.W end_OBD_Mode_response
000310DE                            96  Mode_0x2
000310DE  0C2A 0002 0003            97      CMPI.B #2,($3,A2)
000310E4  6632                      98      BNE.B Mode_0x3
000310E6  0C14 0007                 99      CMPI.B #7,(A4)
000310EA  6500 03DC                100      BCS.W end_OBD_routine
000310EE  4EB9 000314D2            101      JSR (Calc_checksum).L
000310F4  B03C 0001                102      CMP.B #1,D0
000310F8  6600 0320                103      BNE.W end_OBD_Mode_response
000310FC  7000                     104      MOVEQ #0,D0
000310FE  102A 0005                105      MOVE.B ($5,A2),D0
00031102  2E80                     106      MOVE.L D0,(A7)
00031104  7000                     107      MOVEQ #0,D0
00031106  102A 0004                108      MOVE.B ($4,A2),D0
0003110A  2F00                     109      MOVE.L D0,-(A7)
0003110C  4EB9 00023F7A            110      JSR (OBD_Mode_0x2_resp).L
00031112  588F                     111      ADDQ.L #4,A7    ; Adjust stack pointer back to original position
00031114  6000 0304                112      BRA.W end_OBD_Mode_response
00031118                           113  Mode_0x3
00031118  0C2A 0003 0003           114      CMPI.B #3,($3,A2)
0003111E  6620                     115      BNE.B Mode_0x4
00031120  4EB9 000314D2            116      JSR (Calc_checksum).L
00031126  B03C 0001                117      CMP.B #1,D0
0003112A  6600 02EE                118      BNE.W end_OBD_Mode_response
0003112E  4EB9 00025746            119      JSR (OBD_Mode_0x3_resp).L
00031134  13FC 0009 000807D8       120      MOVE.B #9,(OBD_continue_response_counter).L ; Allow this mode to have multiple response packets
0003113C  6000 02DC                121      BRA.W end_OBD_Mode_response
00031140                           122  Mode_0x4
00031140  0C2A 0004 0003           123      CMPI.B #4,($3,A2)
00031146  6618                     124      BNE.B Mode_0x5
00031148  4EB9 000314D2            125      JSR (Calc_checksum).L
0003114E  B03C 0001                126      CMP.B #1,D0
00031152  6600 02C6                127      BNE.W end_OBD_Mode_response
00031156  4EB9 000258EA            128      JSR (OBD_Mode_0x4_resp).L
0003115C  6000 02BC                129      BRA.W end_OBD_Mode_response
00031160                           130  Mode_0x5
00031160  0C2A 0005 0003           131      CMPI.B #5,($3,A2)
00031166  6632                     132      BNE.B Mode_0x6
00031168  0C14 0007                133      CMPI.B #7,(A4)
0003116C  6500 035A                134      BCS.W end_OBD_routine
00031170  4EB9 000314D2            135      JSR (Calc_checksum).L
00031176  B03C 0001                136      CMP.B #1,D0
0003117A  6600 029E                137      BNE.W end_OBD_Mode_response
0003117E  7000                     138      MOVEQ #0,D0
00031180  102A 0005                139      MOVE.B ($5,A2),D0
00031184  2E80                     140      MOVE.L D0,(A7)
00031186  7000                     141      MOVEQ #0,D0
00031188  102A 0004                142      MOVE.B ($4,A2),D0
0003118C  2F00                     143      MOVE.L D0,-(A7)
0003118E  4EB9 0002621A            144      JSR (OBD_Mode_0x5_resp).L
00031194  588F                     145      ADDQ.L #4,A7
00031196  6000 0282                146      BRA.W end_OBD_Mode_response
0003119A                           147  Mode_0x6
0003119A  0C2A 0006 0003           148      CMPI.B #6,($3,A2)
000311A0  6628                     149      BNE.B Mode_0x7
000311A2  0C14 0006                150      CMPI.B #6,(A4)
000311A6  6500 0320                151      BCS.W end_OBD_routine
000311AA  4EB9 000314D2            152      JSR (Calc_checksum).L
000311B0  B03C 0001                153      CMP.B #1,D0
000311B4  6600 0264                154      BNE.W end_OBD_Mode_response
000311B8  7000                     155      MOVEQ #0,D0
000311BA  102A 0004                156      MOVE.B ($4,A2),D0
000311BE  2E80                     157      MOVE.L D0,(A7)
000311C0  4EB9 00028016            158      JSR (OBD_Mode_0x6_resp).L
000311C6  6000 0252                159      BRA.W end_OBD_Mode_response
000311CA                           160  Mode_0x7
000311CA  0C2A 0007 0003           161      CMPI.B #7,($3,A2)
000311D0  6620                     162      BNE.B Mode_0x8
000311D2  4EB9 000314D2            163      JSR (Calc_checksum).L
000311D8  B03C 0001                164      CMP.B #1,D0
000311DC  6600 023C                165      BNE.W end_OBD_Mode_response
000311E0  7000                     166      MOVEQ #0,D0
000311E2  102A 0004                167      MOVE.B ($4,A2),D0
000311E6  2E80                     168      MOVE.L D0,(A7)
000311E8  4EB9 00028646            169      JSR (OBD_Mode_0x7_resp).L
000311EE  6000 022A                170      BRA.W end_OBD_Mode_response
000311F2                           171  Mode_0x8
000311F2  0C2A 0008 0003           172      CMPI.B #8,($3,A2)
000311F8  6628                     173      BNE.B Mode_0x9
000311FA  0C14 000B                174      CMPI.B #11,(A4) ; must have 11 bytes in a mode 0x8 packet!
000311FE  6500 02C8                175      BCS.W end_OBD_routine
00031202  4EB9 000314D2            176      JSR (Calc_checksum).L
00031208  B03C 0001                177      CMP.B #1,D0
0003120C  6600 020C                178      BNE.W end_OBD_Mode_response
00031210  7000                     179      MOVEQ #0,D0
00031212  102A 0004                180      MOVE.B ($4,A2),D0
00031216  2E80                     181      MOVE.L D0,(A7)
00031218  4EB9 0002E7C4            182      JSR (OBD_Mode_0x8_resp).L
0003121E  6000 01FA                183      BRA.W end_OBD_Mode_response
00031222                           184  Mode_0x9
00031222  0C2A 0009 0003           185      CMPI.B #9,($3,A2)
00031228  6630                     186      BNE.B Mode_0xA
0003122A  0C14 0006                187      CMPI.B #6,(A4)
0003122E  6500 0298                188      BCS.W end_OBD_routine
00031232  4EB9 000314D2            189      JSR (Calc_checksum).L
00031238  B03C 0001                190      CMP.B #1,D0
0003123C  6600 01DC                191      BNE.W end_OBD_Mode_response
00031240  7000                     192      MOVEQ #0,D0
00031242  102A 0004                193      MOVE.B ($4,A2),D0
00031246  2E80                     194      MOVE.L D0,(A7)
00031248  4EB9 0002DEE0            195      JSR (OBD_Mode_0x9_resp).L
0003124E  13FC 0009 000807D8       196      MOVE.B #9,(OBD_continue_response_counter).L
00031256  6000 01C2                197      BRA.W end_OBD_Mode_response
0003125A                           198  Mode_0xA
0003125A  0C2A 000A 0003           199      CMPI.B #10,($3,A2)
00031260  6520                     200      BCS.B Mode_0x22
00031262  0C2A 0021 0003           201      CMPI.B #33,($3,A2)
00031268  6218                     202      BHI.B Mode_0x22
0003126A  4EB9 000314D2            203      JSR (Calc_checksum).L
00031270  B03C 0001                204      CMP.B #1,D0
00031274  6600 01A4                205      BNE.W end_OBD_Mode_response
00031278  4EB9 00027F90            206      JSR (OBD_Mode_not_supported).L
0003127E  6000 019A                207      BRA.W end_OBD_Mode_response
00031282                           208  Mode_0x22
00031282  0C2A 0022 0003           209      CMPI.B #34,($3,A2)
00031288  663E                     210      BNE.B Mode_0x23
0003128A  0C14 0007                211      CMPI.B #7,(A4)
0003128E  6500 0238                212      BCS.W end_OBD_routine
00031292  4EB9 000314D2            213      JSR (Calc_checksum).L
00031298  B03C 0001                214      CMP.B #1,D0
0003129C  6600 017C                215      BNE.W end_OBD_Mode_response
000312A0  7000                     216      MOVEQ #0,D0 ; Collect the two PID bytes from the packet, put them on D0
000312A2  102A 0004                217      MOVE.B ($4,A2),D0
000312A6  4840                     218      SWAP D0
000312A8  4240                     219      CLR.W D0
000312AA  4840                     220      SWAP D0
000312AC  E180                     221      ASL.L #8,D0
000312AE  7200                     222      MOVEQ #0,D1
000312B0  122A 0005                223      MOVE.B ($5,A2),D1
000312B4  4841                     224      SWAP D1
000312B6  4241                     225      CLR.W D1
000312B8  4841                     226      SWAP D1
000312BA  D081                     227      ADD.L D1,D0
000312BC  2E80                     228      MOVE.L D0,(A7)
000312BE  4EB9 00024400            229      JSR (OBD_Mode_0x22_resp).L
000312C4  6000 0154                230      BRA.W end_OBD_Mode_response
000312C8                           231  Mode_0x23
000312C8  0C2A 0023 0003           232      CMPI.B #35,($3,A2)
000312CE  6520                     233      BCS.B Mode_0x2F
000312D0  0C2A 002E 0003           234      CMPI.B #46,($3,A2)
000312D6  6218                     235      BHI.B Mode_0x2F
000312D8  4EB9 000314D2            236      JSR (Calc_checksum).L
000312DE  B03C 0001                237      CMP.B #1,D0
000312E2  6600 0136                238      BNE.W end_OBD_Mode_response
000312E6  4EB9 00027F90            239      JSR (OBD_Mode_not_supported).L
000312EC  6000 012C                240      BRA.W end_OBD_Mode_response
000312F0                           241  Mode_0x2F
000312F0  0C2A 002F 0003           242      CMPI.B #47,($3,A2)
000312F6  6600 00A0                243      BNE.W Mode_0x3B
000312FA  0C14 0007                244      CMPI.B #7,(A4)
000312FE  6500 01C8                245      BCS.W end_OBD_routine
00031302  0C2A 0001 0004           246      CMPI.B #1,($4,A2)   ; check for a valid PID structure
00031308  6646                     247      BNE.B long_Mode_0x2F_PID
0003130A  102A 0005                248      MOVE.B ($5,A2),D0
0003130E  0200 001F                249      ANDI.B #31,D0
00031312  663C                     250      BNE.B long_Mode_0x2F_PID
00031314  4EB9 000314D2            251      JSR (Calc_checksum).L
0003131A  B03C 0001                252      CMP.B #1,D0
0003131E  6600 00FA                253      BNE.W end_OBD_Mode_response
00031322  7000                     254      MOVEQ #0,D0
00031324  2E80                     255      MOVE.L D0,(A7)
00031326  7000                     256      MOVEQ #0,D0 ; Collect the two PID bytes from the packet, put them on D0
00031328  102A 0004                257      MOVE.B ($4,A2),D0
0003132C  4840                     258      SWAP D0
0003132E  4240                     259      CLR.W D0
00031330  4840                     260      SWAP D0
00031332  E180                     261      ASL.L #8,D0
00031334  7200                     262      MOVEQ #0,D1
00031336  122A 0005                263      MOVE.B ($5,A2),D1
0003133A  4841                     264      SWAP D1
0003133C  4241                     265      CLR.W D1
0003133E  4841                     266      SWAP D1
00031340  D081                     267      ADD.L D1,D0
00031342  2F00                     268      MOVE.L D0,-(A7)
00031344  4EB9 000269C2            269      JSR (OBD_Mode_0x2F_resp).L
0003134A  588F                     270      ADDQ.L #4,A7
0003134C  6000 00CC                271      BRA.W end_OBD_Mode_response
00031350                           272  long_Mode_0x2F_PID
00031350  0C14 0008                273      CMPI.B #8,(A4)
00031354  6500 0172                274      BCS.W end_OBD_routine
00031358  4EB9 000314D2            275      JSR (Calc_checksum).L
0003135E  B03C 0001                276      CMP.B #1,D0
00031362  6600 00B6                277      BNE.W end_OBD_Mode_response
00031366  7000                     278      MOVEQ #0,D0
00031368  102A 0006                279      MOVE.B ($6,A2),D0
0003136C  2E80                     280      MOVE.L D0,(A7)
0003136E  7000                     281      MOVEQ #0,D0 ; Collect the two PID bytes from the packet, put them on D0
00031370  102A 0004                282      MOVE.B ($4,A2),D0
00031374  4840                     283      SWAP D0
00031376  4240                     284      CLR.W D0
00031378  4840                     285      SWAP D0
0003137A  E180                     286      ASL.L #8,D0
0003137C  7200                     287      MOVEQ #0,D1
0003137E  122A 0005                288      MOVE.B ($5,A2),D1
00031382  4841                     289      SWAP D1
00031384  4241                     290      CLR.W D1
00031386  4841                     291      SWAP D1
00031388  D081                     292      ADD.L D1,D0
0003138A  2F00                     293      MOVE.L D0,-(A7)
0003138C  4EB9 000269C2            294      JSR (OBD_Mode_0x2F_resp).L
00031392  588F                     295      ADDQ.L #4,A7
00031394  6000 0084                296      BRA.W end_OBD_Mode_response
00031398                           297  Mode_0x3B
00031398  0C2A 003B 0003           298      CMPI.B #59,($3,A2)
0003139E  6654                     299      BNE.B Higher_Modes
000313A0  0C14 000B                300      CMPI.B #11,(A4)
000313A4  6500 0122                301      BCS.W end_OBD_routine
000313A8  4EB9 000314D2            302      JSR (Calc_checksum).L
000313AE  B03C 0001                303      CMP.B #1,D0
000313B2  6600 0066                304      BNE.W end_OBD_Mode_response
000313B6  7000                     305      MOVEQ #0,D0 ; now move 6 bytes onto the stack
000313B8  102A 0009                306      MOVE.B ($9,A2),D0
000313BC  2E80                     307      MOVE.L D0,(A7)
000313BE  7000                     308      MOVEQ #0,D0
000313C0  102A 0008                309      MOVE.B ($8,A2),D0
000313C4  2F00                     310      MOVE.L D0,-(A7)
000313C6  7000                     311      MOVEQ #0,D0
000313C8  102A 0007                312      MOVE.B ($7,A2),D0
000313CC  2F00                     313      MOVE.L D0,-(A7)
000313CE  7000                     314      MOVEQ #0,D0
000313D0  102A 0006                315      MOVE.B ($6,A2),D0
000313D4  2F00                     316      MOVE.L D0,-(A7)
000313D6  7000                     317      MOVEQ #0,D0
000313D8  102A 0005                318      MOVE.B ($5,A2),D0
000313DC  2F00                     319      MOVE.L D0,-(A7)
000313DE  7000                     320      MOVEQ #0,D0
000313E0  102A 0004                321      MOVE.B ($4,A2),D0
000313E4  2F00                     322      MOVE.L D0,-(A7)
000313E6  4EB9 0002EB30            323      JSR (OBD_Mode_0x3B_resp).L
000313EC  4FEF 0014                324      LEA ($14,A7),A7
000313F0  6000 0028                325      BRA.W end_OBD_Mode_response
000313F4                           326  Higher_Modes
000313F4  0C2A 003C 0003           327      CMPI.B #60,($3,A2)  ; Use mode 0x3C as a baud rate toggle, no PID needed
000313FA  6618                     328      BNE.B mode_not_present
000313FC  4EB9 000314D2            329      JSR (Calc_checksum).L
00031402  B03C 0001                330      CMP.B #1,D0
00031406  6600 0012                331      BNE.W end_OBD_Mode_response
0003140A  4EB9 00031502            332      JSR (OBD_Mode_0x3C_resp).L
00031410  6000 0008                333      BRA.W end_OBD_Mode_response
00031414                           334  mode_not_present
00031414  4EB9 00027F90            335      JSR (OBD_Mode_not_supported).L
0003141A                           336  end_OBD_Mode_response
0003141A  4214                     337      CLR.B (A4)
0003141C  4239 000807CA            338      CLR.B (Num_serial_bytes_left_to_read).L
00031422  3ABC 03E8                339      MOVE.W #1000,(A5)
00031426  6000 00A0                340      BRA.W end_OBD_routine
0003142A                           341  incorrect_structure_for_ISO_9141
0003142A                           342  ;************ This is the place to patch in custom code! ***************
0003142A  0C12 0055                343      CMPI.B #85,(A2) ; look for the special packet header byte
0003142E  663E                     344      BNE.B no_correct_packet_structure
00031430  0C2A 0080 0001           345      CMPI.B #128,($1,A2) ; Make sure that the incoming packet is not too big
00031436  6236                     346      BHI.B no_correct_packet_structure
00031438  7000                     347      MOVEQ #0,D0
0003143A  102A 0001                348      MOVE.B ($1,A2),D0
0003143E  B014                     349      CMP.B (A4),D0
00031440  6600 0086                350      BNE.W end_OBD_routine   ; do nothing more until we've read in the entire packet
00031444  0C2A 0011 0002           351      CMPI.B #17,($2,A2)
0003144A  670A                     352      BEQ.B process_special_cmd
0003144C  0C2A 0088 0002           353      CMPI.B #136,($2,A2)
00031452  6702                     354      BEQ.B process_special_cmd
00031454  6018                     355      BRA.B no_correct_packet_structure
00031456                           356  process_special_cmd
00031456  4EB9 000314D2            357      JSR (Calc_checksum).L
0003145C  B03C 0001                358      CMP.B #1,D0
00031460  6600 FFB8                359      BNE.W end_OBD_Mode_response
00031464  4EB9 0003163E            360      JSR (special_serial_resp).L
0003146A  6000 FFAE                361      BRA.W end_OBD_Mode_response
0003146E                           362  ;************** End of new K-line response code ************************
0003146E                           363  no_correct_packet_structure
0003146E  4214                     364      CLR.B (A4)   ; reset the index to read received data in the buffer
00031470  4239 000807CA            365      CLR.B (Num_serial_bytes_left_to_read).L
00031476  3ABC 03E8                366      MOVE.W #1000,(A5)   ; reset the 5 sec timeout            
0003147A                           367  check_error_states
0003147A  4A39 000807CC            368      TST.B (Serial_send_buffer_byte_count).L
00031480  6646                     369      BNE.B end_OBD_routine
00031482  4A39 000807CE            370      TST.B (Serial_send_buffer_index).L
00031488  663E                     371      BNE.B end_OBD_routine
0003148A  4A39 000807D8            372      TST.B (OBD_continue_response_counter).L
00031490  6636                     373      BNE.B end_OBD_routine
00031492  4A39 00080838            374      TST.B (DTC_sent_via_OBD_count).L
00031498  6710                     375      BEQ.B check_mode_0x9_response
0003149A  4EB9 00025746            376      JSR (OBD_mode_0x3_resp).L
000314A0  13FC 0009 000807D8       377      MOVE.B #9,(OBD_continue_response_counter).L
000314A8  601E                     378      BRA.B end_OBD_routine
000314AA                           379  check_mode_0x9_response
000314AA  4A39 00080D4A            380      TST.B (OBD_mode_0x9_msgs_sent).L
000314B0  6716                     381      BEQ.B end_OBD_routine
000314B2  7000                     382      MOVEQ #0,D0
000314B4  102A 0004                383      MOVE.B ($4,A2),D0
000314B8  2E80                     384      MOVE.L D0,(A7)
000314BA  4EB9 0002E506            385      JSR (OBD_mode_0x9_resp_cont).L
000314C0  13FC 0009 000807D8       386      MOVE.B #9,(OBD_continue_response_counter).L
000314C8                           387  end_OBD_routine
000314C8  4CEF 3C04 0004           388      MOVEM.L ($4,A7),A5/A4/A3/A2/D2
000314CE  4E5E                     389      UNLK A6
000314D0  4E75                     390      RTS
000314D2                           391  
000314D2                           392  
000314D2                           393  Calc_checksum
000314D2  4213                     394      CLR.B (A3)
000314D4  7400                     395      MOVEQ #0,D2
000314D6  1414                     396      MOVE.B (A4),D2  ; number of bytes in the receveived data buffer
000314D8  5302                     397      SUBI.B #1,D2  ; index of final checksum byte
000314DA  600A                     398      BRA.B checksum_loop_cond_check
000314DC                           399  checksum_loop_start
000314DC  5302                     400      SUBI.B #1,D2
000314DE  1002                     401      MOVE.B D2,D0
000314E0  1232 0800                402      MOVE.B ($0,A2,D0.L),D1  ; Load a byte from the packet
000314E4  D313                     403      ADD.B D1,(A3)   ; Add this to the checksum
000314E6                           404  checksum_loop_cond_check
000314E6  0C02 0000                405      CMPI.B #0,D2
000314EA  66F0                     406      BNE.B checksum_loop_start
000314EC  7000                     407      MOVEQ #0,D0
000314EE  1014                     408      MOVE.B (A4),D0
000314F0  5300                     409      SUBI.B #1,D0
000314F2  1232 0800                410      MOVE.B ($0,A2,D0.L),D1 
000314F6  B213                     411      CMP.B (A3),D1
000314F8  6604                     412      BNE.B bad_checksum
000314FA  7001                     413      MOVEQ #1,D0
000314FC  6002                     414      BRA.B end_checksum
000314FE                           415  bad_checksum
000314FE  7000                     416      MOVEQ #0,D0
00031500                           417  end_checksum
00031500  4E75                     418      RTS
00031502                           419      
00031502                           420  OBD_Mode_0x3C_resp
00031502  3039 00FFFC08            421      MOVE.W (SCCR0).L,D0
00031508  0C40 003C                422      CMPI.W #60,D0
0003150C  6600 009E                423      BNE switch_to_10400
00031510  13FC 0048 000811E8       424      MOVE.B #72,($811e8).L   ; Assemble a fixed packet
00031518  13FC 006B 000811E9       425      MOVE.B #107,($811e9).L
00031520  13FC 0010 000811EA       426      MOVE.B #16,($811ea).L
00031528  13FC 007C 000811EB       427      MOVE.B #124,($811eb).L
00031530  13FC 0031 000811EC       428      MOVE.B #$31,($811ec).L
00031538  13FC 0032 000811ED       429      MOVE.B #$32,($811ed).L
00031540  13FC 0035 000811EE       430      MOVE.B #$35,($811ee).L
00031548  13FC 0030 000811EF       431      MOVE.B #$30,($811ef).L
00031550  13FC 0033 000811F0       432      MOVE.B #$33,($811f0).L
00031558  13FC 0031 000811F1       433      MOVE.B #$31,($811f1).L
00031560  13FC 006B 000811F2       434      MOVE.B #107,($811f2).L
00031568  13FC 000A 000807CC       435      MOVE.B #10,(Serial_send_buffer_byte_count).L
00031570  4239 000807CE            436      CLR.B (Serial_send_buffer_index).L
00031576  7000                     437      MOVEQ #0,D0
00031578  1039 000811E8            438      MOVE.B (Serial_send_buffer).L,D0
0003157E  33C0 00FFFC0E            439      MOVE.W D0,(SCDR).L
00031584                           440  check_serial_status
00031584  7000                     441      MOVEQ #0,D0
00031586  1039 000807CC            442      MOVE.B (Serial_send_buffer_byte_count).L,D0
0003158C  4A00                     443      TST.B D0
0003158E  66F4                     444      BNE.B check_serial_status   ; loop until we're done sending data
00031590  33FC 0000 00FFFC0A       445      MOVE.W #0,(SCCR1).L    ; Disable the serial comms
00031598  33FC 0005 00FFFC08       446      MOVE.W #5,(SCCR0).L    ; Change the baud rate to 1: 625156.3; 2: 312578.1; 3: 208385.4; 4: 156289.1; 5: 125031.3; 6: 104192.7
000315A0  33FC 002C 00FFFC0A       447      MOVE.W #44,(SCCR1).L    ; Enable the serial comms
000315A8  6000 0092                448      BRA end_chg_baud
000315AC                           449  switch_to_10400
000315AC  13FC 0048 000811E8       450      MOVE.B #72,($811e8).L   ; Assemble a fixed packet
000315B4  13FC 006B 000811E9       451      MOVE.B #107,($811e9).L
000315BC  13FC 0010 000811EA       452      MOVE.B #16,($811ea).L
000315C4  13FC 007C 000811EB       453      MOVE.B #124,($811eb).L
000315CC  13FC 0031 000811EC       454      MOVE.B #$31,($811ec).L
000315D4  13FC 0030 000811ED       455      MOVE.B #$30,($811ed).L
000315DC  13FC 0034 000811EE       456      MOVE.B #$34,($811ee).L
000315E4  13FC 0031 000811EF       457      MOVE.B #$31,($811ef).L
000315EC  13FC 0039 000811F0       458      MOVE.B #$39,($811f0).L
000315F4  13FC 003E 000811F1       459      MOVE.B #62,($811f1).L
000315FC  13FC 0009 000807CC       460      MOVE.B #9,(Serial_send_buffer_byte_count).L
00031604  4239 000807CE            461      CLR.B (Serial_send_buffer_index).L
0003160A  7000                     462      MOVEQ #0,D0
0003160C  1039 000811E8            463      MOVE.B (Serial_send_buffer).L,D0
00031612  33C0 00FFFC0E            464      MOVE.W D0,(SCDR).L
00031618                           465  check_serial_status_2
00031618  7000                     466      MOVEQ #0,D0
0003161A  1039 000807CC            467      MOVE.B (Serial_send_buffer_byte_count).L,D0
00031620  4A00                     468      TST.B D0
00031622  66F4                     469      BNE.B check_serial_status_2   ; loop until we're done sending data
00031624  33FC 0000 00FFFC0A       470      MOVE.W #0,(SCCR1).L    ; Disable the serial comms
0003162C  33FC 003C 00FFFC08       471      MOVE.W #60,(SCCR0).L    ; Change the baud rate to 10419.27
00031634  33FC 002C 00FFFC0A       472      MOVE.W #44,(SCCR1).L    ; Enable the serial comms
0003163C                           473  end_chg_baud
0003163C  4E75                     474      RTS
0003163E                           475  
0003163E                           476  special_serial_resp ; This function can only work with the above serial routine due to reliance on address register population
0003163E  4E56 FFE4                477      LINK A6,#-28
00031642  48EF 031E 0004           478      MOVEM.L A1/A0/D4/D3/D2/D1,($4,A7)
00031648  41F9 000811E8            479      LEA Serial_send_buffer,A0
0003164E  4213                     480      CLR.B (A3)   ; let's count up the checksum on this RAM address
00031650  7200                     481      MOVEQ #0,D1 ; An index into the send packet
00031652  70AA                     482      MOVEQ #170,D0 ; Start building the send packet
00031654  1180 1800                483      MOVE.B D0,($0,A0,D1.L)
00031658  D113                     484      ADD.B D0,(A3)
0003165A  5401                     485      ADDQ.B #2,D1    ; For now, skip over the 'number of bytes' byte
0003165C  0C2A 0011 0002           486      CMPI.B #17,($2,A2)
00031662  6600 004A                487      BNE.W special_write
00031666                           488      ; Read data from ROM
00031666  7011                     489      MOVEQ #17,D0
00031668  1180 1800                490      MOVE.B D0,($0,A0,D1.L)
0003166C  D113                     491      ADD.B D0,(A3)
0003166E  5201                     492      ADDQ.B #1,D1
00031670  7403                     493      MOVEQ #3,D2 ; An index into the read packet
00031672  6030                     494      BRA.B Read_data_cond_check
00031674                           495      ; Now process the read data commands in the message
00031674                           496  Read_data_loop_start
00031674  2032 2801                497      MOVE.L ($1,A2,D2.L),D0
00031678  E080                     498      ASR.L #8,D0
0003167A  0280 00FFFFFF            499      ANDI.L #16777215,D0 ; mask the address to three bytes
00031680  2240                     500      MOVEA.L D0,A1   ; Now we have the address to read from
00031682  1032 2800                501      MOVE.B ($0,A2,D2.L),D0  ; Now we also have the number of bytes to read
00031686  6000 000E                502      BRA copy_data_cond_check
0003168A                           503  copy_data_loop_start
0003168A  1619                     504      MOVE.B (A1)+,D3 ; read the requested data
0003168C  1183 1800                505      MOVE.B D3,($0,A0,D1.L)  ; put the data in the serial send packet
00031690  D713                     506      ADD.B D3,(A3)   ; update the checksum
00031692  5201                     507      ADDQ.B #1,D1    ; increment our send packet index
00031694  5300                     508      SUBQ.B #1,D0    ; decrement our 'bytes left to read' counter
00031696                           509  copy_data_cond_check
00031696  0C01 007F                510      CMPI.B #127,D1  ; Make sure we are not trying to read too many bytes
0003169A  6C5A                     511      BGE.B send_packet
0003169C  0C00 0000                512      CMPI.B #0,D0
000316A0  66E8                     513      BNE.B copy_data_loop_start
000316A2  5802                     514      ADDI.B #4,D2    ; Increment our read index to the next command
000316A4                           515  Read_data_cond_check
000316A4  1614                     516      MOVE.B (A4),D3
000316A6  5303                     517      SUBQ.B #1,D3
000316A8  B403                     518      CMP.B D3,D2   ; compare our read index to the number of bytes read in the buffer
000316AA  65C8                     519      BLO Read_data_loop_start
000316AC  6048                     520      BRA.B send_packet
000316AE                           521  
000316AE                           522  special_write
000316AE  7088                     523      MOVEQ #136,D0
000316B0  1180 1800                524      MOVE.B D0,($0,A0,D1.L)
000316B4  D113                     525      ADD.B D0,(A3)
000316B6  5201                     526      ADDQ.B #1,D1
000316B8  7403                     527      MOVEQ #3,D2 ; An index into the read packet
000316BA  6032                     528      BRA.B Write_data_cond_check
000316BC                           529      ; Now process the write data commands in the message
000316BC                           530  Write_data_loop_start
000316BC  2032 2801                531      MOVE.L ($1,A2,D2.L),D0
000316C0  E080                     532      ASR.L #8,D0
000316C2  0280 00FFFFFF            533      ANDI.L #16777215,D0 ; mask the address to three bytes
000316C8  2240                     534      MOVEA.L D0,A1   ; Now we have the address to read from
000316CA  1032 2800                535      MOVE.B ($0,A2,D2.L),D0  ; Now we also have the number of bytes to read
000316CE  5802                     536      ADDQ.B #4,D2
000316D0  1614                     537      MOVE.B (A4),D3 
000316D2  9602                     538      SUB.B D2,D3    ; check to see that a sufficient number of bytes is in the packet
000316D4  5303                     539      SUBQ.B #1,D3    ; remove the checksum too
000316D6  B003                     540      CMP.B D3,D0
000316D8  621C                     541      BHI.B send_packet   ; send the response packet if too few bytes exist in the command packet
000316DA  6000 000C                542      BRA write_block_cond_check
000316DE                           543  write_block_loop_start
000316DE  1632 2800                544      MOVE.B ($0,A2,D2.L),D3
000316E2  12C3                     545      MOVE.B D3,(A1)+
000316E4  5300                     546      SUBQ.B #1,D0
000316E6  5202                     547      ADDQ.B #1,D2
000316E8                           548  write_block_cond_check
000316E8  0C00 0000                549      CMPI.B #0,D0
000316EC  66F0                     550      BNE write_block_loop_start    
000316EE                           551  Write_data_cond_check
000316EE  1614                     552      MOVE.B (A4),D3
000316F0  5303                     553      SUBQ.B #1,D3
000316F2  B403                     554      CMP.B D3,D2
000316F4  65C6                     555      BLO Write_data_loop_start    
000316F6                           556  send_packet
000316F6  1601                     557      MOVE.B D1,D3
000316F8  5203                     558      ADDQ.B #1,D3
000316FA  1143 0001                559      MOVE.B D3,($1,A0)   ; update the 'number of bytes in packet' byte in the packet
000316FE  D713                     560      ADD.B D3,(A3)   ; perform the final checksum update
00031700  1613                     561      MOVE.B (A3),D3  ; then put the checksum into the packet
00031702  1183 1800                562      MOVE.B D3,($0,A0,D1.L)
00031706  13C1 000807CC            563      MOVE.B D1,(Serial_send_buffer_byte_count).L ; Then set the counters to send the packet
0003170C  4239 000807CE            564      CLR.B (Serial_send_buffer_index).L
00031712  7000                     565      MOVEQ #0,D0
00031714  1039 000811E8            566      MOVE.B (Serial_send_buffer).L,D0
0003171A  33C0 00FFFC0E            567      MOVE.W D0,(SCDR).L  ; Then put the first byte from the packet into the buffer in order to send it     
00031720                           568  end_special_ser_routine
00031720  4CEF 031E 0004           569      MOVEM.L ($4,A7),A1/A0/D4/D3/D2/D1
00031726  4E5E                     570      UNLK A6
00031728  4E75                     571      RTS
0003172A                           572      
0003172A  FFFF FFFF                573      SIMHALT             ; halt simulator
0003172E                           574  
0003172E                           575  * Put variables and constants here
0003172E                           576  
0003172E                           577      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BAD_CHECKSUM        314FE
CALC_CHECKSUM       314D2
CHECKSUM_CALC_BUFFER  807D0
CHECKSUM_LOOP_COND_CHECK  314E6
CHECKSUM_LOOP_START  314DC
CHECK_ERROR_STATES  3147A
CHECK_MODE_0X9_RESPONSE  314AA
CHECK_OBD_MODE      3108A
CHECK_SERIAL_STATUS  31584
CHECK_SERIAL_STATUS_2  31618
COPY_DATA_COND_CHECK  31696
COPY_DATA_LOOP_START  3168A
DTC_SENT_VIA_OBD_COUNT  80838
END_CHECKSUM        31500
END_CHG_BAUD        3163C
END_OBD_MODE_RESPONSE  3141A
END_OBD_ROUTINE     314C8
END_SPECIAL_SER_ROUTINE  31720
HIGHER_MODES        313F4
INCORRECT_STRUCTURE_FOR_ISO_9141  3142A
JUMP_START          3106E
LONG_MODE_0X2F_PID  31350
MODE_0X2            310DE
MODE_0X22           31282
MODE_0X23           312C8
MODE_0X2F           312F0
MODE_0X3            31118
MODE_0X3B           31398
MODE_0X4            31140
MODE_0X5            31160
MODE_0X6            3119A
MODE_0X7            311CA
MODE_0X8            311F2
MODE_0X9            31222
MODE_0XA            3125A
MODE_NOT_PRESENT    31414
NO_CORRECT_PACKET_STRUCTURE  3146E
NUM_SERIAL_BYTES_LEFT_TO_READ  807CA
OBD_CONTINUE_RESPONSE_COUNTER  807D8
OBD_INIT_LEVEL      807BC
OBD_MODE_0X1_RESP   2351E
OBD_MODE_0X22_RESP  24400
OBD_MODE_0X2F_RESP  269C2
OBD_MODE_0X2_RESP   23F7A
OBD_MODE_0X3B_RESP  2EB30
OBD_MODE_0X3C_RESP  31502
OBD_MODE_0X3_RESP   25746
OBD_MODE_0X4_RESP   258EA
OBD_MODE_0X5_RESP   2621A
OBD_MODE_0X6_RESP   28016
OBD_MODE_0X7_RESP   28646
OBD_MODE_0X8_RESP   2E7C4
OBD_MODE_0X9_MSGS_SENT  80D4A
OBD_MODE_0X9_RESP   2DEE0
OBD_MODE_0X9_RESP_CONT  2E506
OBD_MODE_NOT_SUPPORTED  27F90
OBD_TIMEOUT_COUNTER_5MS_MULTIPLE  807D2
PROCESS_SPECIAL_CMD  31456
READ_DATA_COND_CHECK  316A4
READ_DATA_LOOP_START  31674
SCCR0               FFFC08
SCCR1               FFFC0A
SCDR                FFFC0E
SCSR                FFFC0C
SEND_PACKET         316F6
SERIAL_RECEIVED_BYTE_COUNT  807C8
SERIAL_RECEIVE_BUFFER  81168
SERIAL_SEND_BUFFER  811E8
SERIAL_SEND_BUFFER_BYTE_COUNT  807CC
SERIAL_SEND_BUFFER_INDEX  807CE
SPECIAL_SERIAL_RESP  3163E
SPECIAL_WRITE       316AE
START               31030
SWITCH_TO_10400     315AC
WRITE_BLOCK_COND_CHECK  316E8
WRITE_BLOCK_LOOP_START  316DE
WRITE_DATA_COND_CHECK  316EE
WRITE_DATA_LOOP_START  316BC
